;;; -*- mode: scheme -*-

(use-modules (ice-9 regex)
             (srfi srfi-1))

(define (p str)
  "Pathify string."
  (regexp-substitute/global
   #f "~[^/]*" str
   'pre (lambda (_) (getenv "HOME")) 'post))

(for-each (lambda (p) (add-to-load-path p))
          (list (p "~/code/guile")
                (p "~/.local/share/guile/")))

(catch 'misc-error
  (lambda ()
    (use-modules (ice-9 readline))
    (activate-readline))
  (lambda args
    (display "Failed to initialize readline\n" (current-error-port))))

(use-modules ((system repl common)
             :select (repl-default-option-set!
                       repl-welcome
                       repl-options))
             ((ice-9 pretty-print)
              :select (pretty-print)))

(repl-default-option-set!
  'print (lambda (repl value)
           (define terminal-width (read ((@ (ice-9 popen) open-input-pipe) "tput cols")))

           ;; hack to find width of current prompt...
           (define prompt-width
             (if (not (car (assoc-ref (repl-options repl) 'value-history)))
                 0
                 ;; find first undefined of $1, $10, $100, ...
                 (let loop ((exp 0))
                   (catch 'misc-error
                     (lambda ()
                       (define str (string-append "$" (number->string (expt 10 exp))))
                       (module-ref (current-module)
                                   (string->symbol str))
                       (+ (string-length str) (string-length " = ")))
                     (lambda _ (loop (1+ exp)))))))

           (define pretty-string
             (with-output-to-string
               (lambda ()
                 (pretty-print
                  value
                  #:width (- terminal-width prompt-width)
                  #:max-expr-width (- terminal-width prompt-width)
                  #:per-line-prefix (make-string prompt-width #\space)))))

           (display
             ;; add width of current prompt to all lines
             ;; except the first (since the actual prompt is there).
             (string-drop pretty-string prompt-width))))

(set! repl-welcome (const #t))

;;; vim: filetype=scheme
