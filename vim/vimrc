" initial {{{

scriptencoding utf-8
set encoding=utf-8
"set nocompatible
set t_Co=256

"}}}

" Plugin manager {{{

let g:downloaded_plug = 0
if findfile ("plug.vim", expand("~/.vim/autoload")) == ""
	echo "Downloading Plug!"
	echo "Please Wait..."
	call system("curl -fLo ~/.vim/autoload/plug.vim --create-dirs " .
	          \ "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim")
	let g:downloaded_plug = 1
endif

call plug#begin("~/.vim/plugged")
	Plug 'junegunn/vim-plug'              " For Documentation
	Plug 'godlygeek/tabular'              " Aligning of text
	Plug 'scrooloose/nerdtree'            " filetree
	Plug 'scrooloose/syntastic'           " Compiler error handler
	Plug 'airblade/vim-gitgutter'         " git diff sign
	Plug 'majutsushi/tagbar'              " Side buffer containing tag list
	Plug 'drmikehenry/vim-headerguard'    " Auto place C header guards
	Plug 'tpope/vim-speeddating'          " Make C-[ax] work with dates
	Plug 'ryvnf/readline.vim'             " Readline in command mode
	Plug 'vimwiki/vimwiki', {'branch': 'dev'}
	Plug 'tpope/vim-fugitive'
	Plug 'hari-rangarajan/CCTree'
	Plug 'junegunn/goyo.vim'
	Plug 'puppetlabs/puppet-syntax-vim'
	" Plug 'lilydjwg/colorizer' " Really cool plugin, but WAY to slow for larger files

	" gdb breakpoint sign
	if     version >= 801 | Plug 'HugoNikanor/vim-breakpoint'
	elseif version == 800 | Plug 'HugoNikanor/vim-breakpoint', {'tag': 'v8'}
	else                  | Plug 'HugoNikanor/vim-breakpoint', {'tag': 'v7'}
	endif
	" Requires that fzf is installed on the system
	"
	" Assumes $VIM is /usr/share/vim/. Path is pacman path for
	" vim pluggins. Other package managers might differ
	if empty(findfile($VIM . "/vimfiles/plugin/fzf.vim"))
		Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
	endif
	Plug 'junegunn/fzf.vim'

call plug#end()

if g:downloaded_plug
	" TODO running this from vimrc causes the terminal
	" to be placed in underline mode. Fix this and reenable
	" this here.
	"PlugInstall
	echo "Run `:PlugInstall` to actually download pluggins"
endif

"}}}

" Higlighting {{{

syntax on
colorscheme comments

" Color marking when passing line 80
call matchadd('ColorColumn', '\%81v', 100)
syntax match Error "\s\+$" " Trailing whitespace

if $TERM ==? "linux"
	exec "set listchars=tab:>-,eol:$,nbsp:_,trail:~"
elseif $TERM =~ "xterm"
	exec "set listchars=tab:>â€”,eol:\u00b6,nbsp:\u2423,trail:~"
elseif $TERM =~ "screen"
	" Both Screen and Tmux terminals are here
	exec "set listchars=tab:>-,eol:\u00b6,nbsp:\u2423,trail:~"
elseif $TERM =~ "alacritty"
else
	" Other terminal types, set safe fallback
	colorscheme default
endif

"}}}

" Functions {{{

" This section is mostly for custom functions which are to small, or
" to early in testing to be broken out into separate plugins.

" Finds the first instance of '\[[X ]\]' on the current line, and
" toggles between 'X' and space. Currently an error to run it when
" '\[[^X ]\]' matches before the actual pattern
function! s:toggleCheckbox()
	" Save current cursor position and last search, we (accidentally)
	" override them in the function, but don't want the function to
	" have side effects.
	let l:pos = getpos('.')
	let l:search = @/

	let l:pat = '\[ \]'
	if matchstr(getline('.'), l:pat) =~ l:pat
		s/\[ \]/[X]/
	else
		s/\[X\]/[ ]/
	endif

	" Restore state
	call setpos('.', l:pos)
	let @/ = l:search
endfunction

command! ToggleCheckbox call s:toggleCheckbox()

" Inserts a date at the end of the current line, today if no arguments
" given, otherwise sends arguments to date(1). Outputs on format
" <%F %a>.
" TODO get this working with vim-speeddating
" TODO ':Date 10' should insert the next 10th, (current or next month)
" TODO Way to get times, see emacs org-mode
function! s:insert_date(...)
	let l:fmt = join(a:000)

	" I know vim has strftime, but it was easier to do everything with
	" a single command.
	let l:cmd = printf("date +'<%%F %%a>' --date=%s", shellescape(l:fmt))
	let l:datestr = trim(system(l:cmd))

	put =l:datestr
	normal! kJ
endfunction

command! -nargs=* Date call s:insert_date(<q-args>)

" }}}

" Other {{{

cnoreabbrev ntt NERDTreeToggle
cnoreabbrev w!! w !sudo tee % > /dev/null
cnoreabbrev vh vertical help
com! FormatJSON %!python -m json.tool

let mapleader=" "

nnoremap <silent> <leader>o :nohlsearch<cr>
nnoremap <leader>s :%s/\s\+$//<cr>
nnoremap <leader>d 0D
nnoremap <silent> <leader>a :set foldlevel=0<cr>
"nnoremap <leader>f :NERDTreeToggle<cr>
nnoremap <leader>f :Files<cr>
nnoremap <silent> <leader>j :cn<cr>
nnoremap <silent> <leader>k :cp<cr>

" Possibly figure out how to type <C-]> in TTY
nnoremap <leader>c <C-]>
" TODO This works, but it doesn't update the screen right away
nnoremap <leader>h :call header#change()<cr>

nnoremap <cr> o<esc>
nnoremap Y y$

nnoremap <C-p> :Files<cr>
nnoremap <C-n> :Tags<cr>

set tabstop=4
set shiftwidth=4
set softtabstop=4

set foldenable
set foldmethod=marker
set foldnestmax=20
set foldlevelstart=0
set foldlevel=0

set smartindent
set mouse=a
set number
set breakindent       " makes wrapped lines have the same indention as the original line
set visualbell t_vb=  " disable terminal flashing on error
set laststatus=2      " Display filename on the next to last line
set ruler             " Show cursor possition in info bar
set showcmd           " Show button presses in lower right portion of the screen
set ignorecase        " Ignore case while searching
set smartcase         " but keep if capitals are present
set wildmenu          " Tab shows options
set splitbelow
set splitright
set incsearch         " interactive search
set hlsearch          " highlight all
set virtualedit=block " like all but only for visual block
set completeopt=longest,menuone " <C-n> don't autoselect
set path+=**
set scrolloff=1
set nrformats-=octal

set wildignore+=tags
set wildignore+=*.o
set wildignore+=*.a
set wildignore+=*.so
set wildignore+=*.hi
set tags+=tags;/

set textwidth=70
set formatoptions=croqnlj

"}}}

" Vimwiki {{{

" Something with how Vimwiki loads requires that this is here rather
" than in ftplugin.

let pub_wiki = {
			\ 'path': '~/wiki/public',
			\ 'auto_tags': 1,
			\ 'list_margin': 2,
			\ 'auto_toc': 1,
			\ 'automatic_nested_syntaxes': 1,
			\ 'maxhi': 1,
			\ 'template_path': '~/wiki/public/templates/',
			\ }
			" \ 'nested_syntaxes': { 'php': 'php',
			" \                      'css': 'css' },

let private_wiki = {
			\ 'path': '~/wiki/private',
			\ 'auto_tags': 1,
			\ 'list_margin': 2,
			\ 'auto_toc': 1,
			\ 'automatic_nested_syntaxes': 1,
			\ 'template_path': '~/wiki/public/templates/',
			\ }

let g:vimwiki_list = [pub_wiki, private_wiki]

" let g:vimwiki_hl_headers = 1
let g:vimwiki_hl_cb_checked = 1

let g:vimwiki_diary_months = {
			\ 1: 'Januari',   2: 'Februari',  3: 'Mars',
			\ 4: 'April',     5: 'Maj',       6: 'Juni',
			\ 7: 'Juli',      8: 'Augusti',   9: 'September',
			\ 10: 'Oktober', 11: 'November', 12: 'December'
			\ }

let g:tagbar_type_vimwiki = {
          \   'ctagstype':'vimwiki'
          \ , 'kinds':['h:header']
          \ , 'sro':'&&&'
          \ , 'kind2scope':{'h':'header'}
          \ , 'sort':0
          \ , 'ctagsbin':'/home/hugo/wiki/.aux/vwtags.py'
          \ , 'ctagsargs': 'default'
          \ }

" let g:tagbar_type_vimwiki = {
" 			\    'ctagstype' : 'vimwiki'
" 			\ ,      'kinds' : ['h:header']
" 			\ ,        'sro' : '&&&'
" 			\ , 'kind2scope' : {'h': 'header'}
" 			\ ,       'sort' : 0
" 			\ ,   'ctagsbin' : '/home/hugo/wiki/.aux/vwtags.py'
" 			\ ,  'ctagsargs' : 'default'
" 			\ }

" }}}
