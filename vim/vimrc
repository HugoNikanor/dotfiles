" initial {{{ 

scriptencoding utf-8
set encoding=utf-8
set nocompatible
set t_Co=256

"}}}

" Vundle / Plugin manager {{{

let g:downloaded_plug = 0
if findfile ("plug.vim", expand("~/.vim/autoload")) == ""
	echo "Downloading Plug!"
	echo "Please Wait..."
	call system("curl -fLo ~/.vim/autoload/plug.vim --create-dirs " .
	          \ "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim")
	let g:downloaded_plug = 1
endif

call plug#begin("~/.vim/plugged")
	Plug 'junegunn/vim-plug'              " For Documentation
	Plug 'christoomey/vim-tmux-navigator' "  Tmux & vim integration, somehow
	Plug 'godlygeek/tabular'              "  Aligning of text
	"Plug 'scrooloose/nerdtree'            "  filetree
	Plug 'Xuyuanp/nerdtree-git-plugin'    "  git plugin for ^
	"Plug 'tpope/vim-surround'            "
	"Plug 'tpope/vim-dispatch'
	Plug 'scrooloose/syntastic'           "  error checking
	Plug 'airblade/vim-gitgutter'         "  git diff sign
	" gdb breakpoint sign
	if version >= 800 |Plug 'HugoNikanor/vim-breakpoint'
	else              |Plug 'HugoNikanor/vim-breakpoint', {'tag': 'v7'}
	endif
	Plug 'majutsushi/tagbar'
	Plug 'Shougo/unite.vim'

	" Requires that fzf is installed on the system
	"
	" Assumes $VIM is /usr/share/vim/. Path is pacman path for
	" vim pluggins. Other package managers might differ
	if empty(findfile($VIM . "/vimfiles/plugin/fzf.vim"))
		Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
	endif
	Plug 'junegunn/fzf.vim'

	Plug 'vim-scripts/bnf.vim'

	"Plug 'lervag/vimtex'                  "  latex thingys

	Plug 'drmikehenry/vim-headerguard'

call plug#end()

if g:downloaded_plug
	" TODO running this from vimrc causes the terminal
	" to be placed in underline mode. Fix this and reenable
	" this here.
	"PlugInstall
	echo "Run `:PlugInstall` to actually download pluggins"
endif

"}}}

" Higlighting {{{

syntax on
colorscheme comments

call matchadd('ColorColumn', '\%81v', 100) " Color marking when passing line 80
syntax match Error "\s\+$" " Trailing whitespace

if $TERM ==? "linux"
	exec "set listchars=tab:>-,eol:$,nbsp:_,trail:~"
" This should be changed to match anything containing xterm
elseif ($TERM ==? "xterm") + ($TERM ==? "xterm-termite")
	exec "set listchars=tab:>â€”,eol:\u00b6,nbsp:\u2423,trail:~"
elseif expand($TMUX) != ''
	exec "set listchars=tab:>-,eol:\u00b6,nbsp:\u2423,trail:~"
else " who knows what this is
	colorscheme delek
endif
" There should also be a clause for anything containing 'screen'

"}}}

" Other {{{

" cmap expands at type time, cnoreabbrev at run time
cnoreabbrev ntt NERDTreeToggle
cnoreabbrev w!! w !sudo tee % > /dev/null
cmap vh vertical help
com! FormatJSON %!python -m json.tool

let mapleader=" "

nnoremap <silent> <leader>o :nohlsearch<cr>
nnoremap <leader>s :%s/\s\+$//<cr>
nnoremap <leader>d 0D
nnoremap <silent> <leader>a :set foldlevel=0<cr>
"nnoremap <leader>f :NERDTreeToggle<cr>
nnoremap <leader>f :Files<cr>
nnoremap <silent> <leader>j :cn<cr>
nnoremap <silent> <leader>k :cp<cr>

nnoremap <cr> o<esc>
"nnoremap j gj
"nnoremap k gk
"nnoremap gj j
"nnoremap gk k
nnoremap Y y$

set tabstop=4
set shiftwidth=4
set softtabstop=4

set foldenable

set foldmethod=marker
set foldnestmax=20
set foldlevelstart=0
set foldlevel=0

set smartindent
set mouse=a
set number
set breakindent       " makes wrapped lines have the same indention as the original line
set visualbell t_vb=  " disable terminal flashing on error
set laststatus=2      " Display filename on the next to last line
set ruler             " Show cursor possition in info bar
set showcmd           " Show button presses in lower right portion of the screen
set ignorecase        " Ignore case while searching
set smartcase         " but keep if capitals are present
set wildmenu          " Tab shows options
set splitbelow
set splitright
set incsearch         " interactive search
set hlsearch          " highlight all
set virtualedit=block " like all but only for visual block
set completeopt=longest,menuone " <C-n> don't autoselect
set path+=**

set wildignore+=tags
set tags+=tags;/

"}}}
