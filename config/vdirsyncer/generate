#!/usr/bin/guile \
-e main -s
!#

(add-to-load-path "/home/hugo/code/guile-fmt")

(use-modules (fmt)
             (ice-9 getopt-long)
             (ice-9 rdelim))

(define (assoc-ref* alist key default-list)
  (let ((v (or (assoc-ref alist key)
               (assoc-ref default-list key))))
    (cond
     ((null? v) "null")
     ((boolean? v) (if v "true" "false"))
     ((symbol? v) (symbol->string v))
     ((string? v) (string-append "\"" v "\""))
     (else v))))

(define option-spec
  '((file (single-char #\f) (value #t))
    (pre (value #t))
    (help (single-char #\h) (value #f))))

(define (display-pre fname)
  (with-input-from-file fname
    (lambda () (display (read-string)))))

(define (main args)
  (define options (getopt-long args option-spec))

  (when (option-ref options 'help #f)
    (display (fmt "
Usage:
./${(current-filename)}
    --file <input-file>
    --pre <pre-file>
Where <input-file> is a file containing a single sexp ...
pre-file is included verbatim at the top of the output
"))
    (exit 1)
    )

  (and=> (option-ref options 'pre #f)
         display-pre)

  (let ((f (call-with-input-file
               (option-ref options 'file "input")
             read)))
    (let ((pair-def (assoc-ref f 'pair-defaults))
          (remote-def (assoc-ref f 'remote-defaults))
          (local-def (assoc-ref f 'local-defaults))
          (pairs (cdr (assoc-ref f 'pairs))))
      (for-each (lambda (pair)
                  (let ((name (car pair))
                        (alist (cdr pair)))
                    (let ((a (or (assoc-ref alist 'pair) pair-def)))
                      (display (fmt "
# ========================================

[pair ${name}]
a = \"${name}_remote\"
b = \"${name}_local\"
collections = ${(assoc-ref* a 'collections pair-def)}
conflict_resolution = ${(assoc-ref* a 'conflict_resolution pair-def)}
")))
                    (let ((a (or (assoc-ref alist 'remote) remote-def)))
                      (display (fmt "
[storage ${name}_remote]
type = ${(assoc-ref* a 'type remote-def)}
read_only = ${(assoc-ref* a 'read_only remote-def)}
url = ${(assoc-ref* a 'url remote-def)}
")))
                    (let ((a (or (assoc-ref alist 'local) local-def)))
                      (display (fmt "
[storage ${name}_local]
type = ${(assoc-ref* a 'type local-def)}
fileext = ${(assoc-ref* a 'fileext local-def)}
path = \"~~/.calendars/${name}\"
")))))
                pairs))))
